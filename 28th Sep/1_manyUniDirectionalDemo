application.properties
-------------------------------
server.port=8090
#spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
#spring.datasource.url=jdbc:mysql://localhost:3306/ManyDB1
#spring.datasource.username=root
#spring.datasource.password=Shreemb2004r


#Hibernate Configurations
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
#spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:postgresql://localhost:5432/Arabia
spring.datasource.username=postgres
 spring.datasource.password=Shreemb2004r

#Hibernate Configurations
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.generate-ddl=true
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update

------------------------------------------------------------------
Model classes
-----------------------------------------------------------------
package com.example.OneToManyMappingGlobal.model;

import java.util.ArrayList;
import java.util.List;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToMany;

@Entity
public class Author {
    @Id
   // @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;
    private String name;

    @OneToMany( cascade = CascadeType.ALL)
   @JoinColumn(name="author_id",referencedColumnName="id")
    private List<Book> books = new ArrayList<>();

    
    public Author() {}
	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}


	@Override
	public String toString() {
		return "Author [id=" + id + ", name=" + name + ", books=" + books + "]";
	}
	public List<Book> getBooks() {
		return books;
	}

	public void setBooks(List<Book> books) {
		this.books = books;
	}

	

   
}
------------------------------------------
package com.example.OneToManyMappingGlobal.model;

import jakarta.persistence.ManyToOne;
import java.util.ArrayList;
import java.util.List;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToMany;

@Entity
public class Book {
    @Id
   // @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;
    private String title;

 
    
    public Book() {}
    public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

//	public Author getAuthor() {
//		return author;
//	}
//
//	public void setAuthor(Author author) {
//		this.author = author;
//	}

   
}
----------------------------------------------------------------
Repo Layer
-----------------------------------------------------------------------
package com.example.OneToManyMappingGlobal.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.example.OneToManyMappingGlobal.model.Author;
@Repository
public interface AuthorRepository extends JpaRepository<Author, Long> {
}

-----------------
package com.example.OneToManyMappingGlobal.repository;
import org.springframework.data.jpa.repository.JpaRepository;
import com.example.OneToManyMappingGlobal.model.*;

public interface BookRepository extends JpaRepository<Book, Long> {
}
-------------------------------------------------------------------------------------------
Service Layer
------------------------------------------------------------------------------------------
package com.example.OneToManyMappingGlobal.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;


import com.example.OneToManyMappingGlobal.exception.GlobalExceptionHandler;
import com.example.OneToManyMappingGlobal.exception.InvalidAuthorIdException;
import com.example.OneToManyMappingGlobal.model.Author;
import com.example.OneToManyMappingGlobal.repository.AuthorRepository;
import java.util.*;
@Service
public class AuthorService {
    @Autowired(required=true)
    private AuthorRepository authorRepository;

    public List<Author> getAllAuthors() {
        return authorRepository.findAll();
    }

    public Author createAuthor(Author author) {
    	System.out.println("before saving");
    
         authorRepository.save(author);
         System.out.println("after saving");
    	
    	
         return author;
    }

    public Author getAuthorById(Long id) throws InvalidAuthorIdException{
    	Author a1=null;
        Optional<Author> a=authorRepository.findById(id);
        if(a.isPresent())
        {
        	 a1=a.get();
        }
        else
        {
        	throw new InvalidAuthorIdException();
        }
        return a1;
    }

    public void deleteAuthorById(Long id) {
        authorRepository.deleteById(id);
    }


}
------------------
package com.example.OneToManyMappingGlobal.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.OneToManyMappingGlobal.model.Book;
import com.example.OneToManyMappingGlobal.repository.BookRepository;

@Service
public class BookService {
    @Autowired(required=true)
    private BookRepository bookRepository;

    public List<Book> getAllBooks() {
        return bookRepository.findAll();
    }

    public Book createBook(Book book) {
        return bookRepository.save(book);
    }

    public Book getBookById(Long id) {
        return bookRepository.findById(id).orElse(null);
    }

    public void deleteBookById(Long id) {
        bookRepository.deleteById(id);
    }

 
}
-----------------------------------------------------------------------------------
Controller layer
----------------------------------------------------------------------------------
package com.example.OneToManyMappingGlobal.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import java.util.*;

import com.example.OneToManyMappingGlobal.exception.InvalidAuthorIdException;
import com.example.OneToManyMappingGlobal.model.Author;
import com.example.OneToManyMappingGlobal.service.AuthorService;

@RestController
@RequestMapping("/authors")
public class AuthorController {
    @Autowired
    private AuthorService authorService;

    @GetMapping("/listallauthors")
    public List<Author> getAllAuthors() {
        return authorService.getAllAuthors();
    }

    @PostMapping("/addauthor")
    public Author createAuthor(@RequestBody Author author) {
        return authorService.createAuthor(author);
    }
       

    @GetMapping("/{id}")
    public Author getAuthorById(@PathVariable Long id)throws InvalidAuthorIdException {
        return authorService.getAuthorById(id);
    }

    @DeleteMapping("delbyAuthorId/{id}")
    public void deleteAuthorById(@PathVariable Long id) {
        authorService.deleteAuthorById(id);
    }

    
}
-----------------
package com.example.OneToManyMappingGlobal.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.OneToManyMappingGlobal.model.Book;
import com.example.OneToManyMappingGlobal.service.BookService;
import java.util.*;
@RestController
@RequestMapping("/books")
public class BookController {
    @Autowired
    private BookService bookService;

    @GetMapping("/listallBooks")
    public List<Book> getAllBooks() {
        return bookService.getAllBooks();
    }

    @PostMapping("/addbook")
    public Book createBook(@RequestBody Book book) {
        return bookService.createBook(book);
    }

    @GetMapping("/{id}")
    public Book getBookById(@PathVariable Long id) {
        return bookService.getBookById(id);
    }

    @DeleteMapping("delbyBookid/{id}")
    public void deleteBookById(@PathVariable Long id) {
        bookService.deleteBookById(id);
    }

   
}
----------------------------------------------------------------------------------
Exception Layer
---------------------------------------------------------------------------------------
package com.example.OneToManyMappingGlobal.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(code=HttpStatus.NOT_FOUND, reason="Author id doesn't exist")
public class InvalidAuthorIdException extends Exception{

		
	
}
---------
package com.example.OneToManyMappingGlobal.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

@ControllerAdvice
public class GlobalExceptionHandler {
    
	@ExceptionHandler(InvalidAuthorIdException.class)
    public ResponseEntity<String> handleException(InvalidAuthorIdException e) {
    	System.out.println("i am inside global exception"+e.toString());
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(e.getMessage());
    }
    
}














